# sorted()
# 퀵 정렬과 동작 방식이 비슷한 병합 정렬(Merge Sorting)을 기반으로 만들어짐
# 일반적으로 퀵 정렬보다 느리지만 최악의 경우에도 시간 복잡도 O(NlogN)을 보장한다
# 리스트, 딕셔너리 자료형 등을 입력받아서 정렬된 결과를 출력한다. 이때, 출력되는 결과는 항상 리스트 자료형이다.
array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

result = sorted(array)
print(result)

# sort()
# 리스트 변수가 하나 있을 때 내부 원소를 바로 정렬 할 때
# 별도의 정렬된 리스트가 반환되지 않고 내부 원소가 바로 정렬됨
array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

array.sort()
print(array)

# key 매개변수를 입력으로 받는 경우
# ex) 리스트의 데이터가 튜플로 구성되어 있을 때, 각 데이터의 두 번째 원소를 기준으로 설정하는 경우
array = [('바나나', 2), ('사과', 5), ('당근', 3)]

def setting(data):
    return data[1]

result = sorted(array, key=setting)
print(result)

# 정렬 라이브러리는 항상 최악의 경우에도 시간 복잡도 O(NlogN)을 보장한다
# 직접 퀵 정렬을 구현할 때보다 더욱더 효과적이다.

# 문제에서 별도의 요구가 없다면 기본 정렬 라이브러리를 사용
# 데이터의 범위가 한정되어 있으며 더 빠르게 동작해야 할 때는 계수 정렬을 사용

# 코딩 테스트에서 정렬 알고리즘이 사용되는 경우
# 1. 정렬 라이브러리로 풀 수 있는 문제
# 2. 정렬 알고리즘의 원리에 대해서 물어보는 문제
# 3. 더 빠른 정렬이 필요한 문제